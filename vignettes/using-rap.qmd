---
title: "Working in Research Analysis Platform (RAP)"
execute: 
  eval: false
---

When working on the UKB RAP, the easiest way (that we've found) is to do
your work through Git and GitHub on the [SDCA
account](https://github.com/steno-aarhus/). This is due to a few
reasons:

1.  *Every* time you start up and enter into the UKB RAP, the working
    computer environment is *completely* clean... No personal files, no
    R packages installed, nothing. So we need some way of saving our
    work to downloading it again when we next work in the RAP.

2.  Whenever you finish working for the day, you *must* terminate your
    RStudio session because we pay for the RStudio use every hour. So we
    can't just leave the session running all the time, we have to turn
    it off. This forces us into the situation described in the point
    above.

3.  There are several of us working on this project and we want to be
    able to easily collaborate and help each other out. We will also
    have frequent code reviews of analyses. Both the collaboration and
    reviews are best done through Git and GitHub.

4.  The UKB organizing committee will review all project proposals and
    do some basic admin tasks, so keeping things organized and
    centralized on GitHub will help us be effective in our tasks.

5.  Because all code will be stored on the SDCA GitHub, it will be
    easier to share code and how we do things through it. So you the PhD
    student, postdoc, or researcher can better make use of all the
    efforts everyone is doing.

Because of these reasons, we expect everyone working on the Steno UK
Biobank project to use Git and use Steno's GitHub account to store their
project.

## Steps to take when outside the UKB RAP

::: callout-note
This step really only needs to be done once.
:::

::: callout-tip
Some of these tasks can be really difficult to understand what's going
on, and that's ok and totally normal. The very start of a project is
always some of the most difficult stage of a project. But if you follow
these tasks, you'll have a solid foundation for doing your work within
the special environment of the UK Biobank RAP.
:::

The very first tasks you'll need to do is to install the ukbAid package:

```{r}
# Install the pak package if you haven't already.
# install.packages("pak")
pak::pak("steno-aarhus/ukbAid")
```

After that, we need to make sure that your computer has Git configured
properly. In your Console, type out the below code, replacing my name
(Luke) and my email with your own:

```{r}
ukbAid::setup_git_config("Luke W. Johnston", "lwjohnst@gmail.com")
```

You should get an output showing your `user.email` and `user.name`.

let's connect your project to GitHub right from the beginning. To do
that in a relatively easy way, we have to create a thing called a
Personal Access Token (PAT) in GitHub in order for Git on your computer
to know how to connect your project to GitHub.

If you don't have a GitHub account, create one first. After that (or if
you already have one), when in your RStudio project, in the Console type
out this command:

```{r}
usethis::create_github_token()
```

This will send you to your GitHub account and create a basic PAT for
you. Change the token's description to something like "For UKB project".
Set the "Expiry date" to 90 days (this is a good security feature).
Create the token, which will change pages and you'll be shown a string
of letters starting with `ghp_`. Copy this token and save it somewhere
safe, preferably in a [password
manager](https://www.pcmag.com/picks/the-best-password-managers). This
token acts a bit like your password but is safer to use than your
password. Once you've saved it somewhere, go back to RStudio and than
run this command in the Console:

```{r}
gitcreds::gitcreds_set()
```

And then paste the token into the prompt in the Console. If it asks to
replace an existing one, select the "yes" option. Doing this is a bit
like using the 2FA message with the temporary passcode you get sent
whenever you have to open your work's email or when you use MitID or
NemID (in Denmark). Every time you open RStudio (or start your
computer), you need to run this command and give R the token so that it
can connect to GitHub securely.

::: callout-important
Why do we need to do this on our computer? Because whenever you connect
to GitHub through RStudio (like uploading and downloading your changes),
GitHub needs you to authenticate that it is you and not someone else. In
order to do that, you need to give GitHub a password to do that. In the
past, you could use your same password connected to your GitHub account,
but the problem with this method is that your password gets sent over
the Internet many times, which increases the risk that someone will
maliciously obtain your password. So instead, we use a temporary,
restricted-access token that we can easily create and delete. This token
only has limited access to your account, so it is safer to send over the
Internet, and it can be very easy to delete without affecting your
account.
:::

Next, you will need to download ("clone" in Git language) the project
repository that was created for you. In the Console, type out this,
replacing my project abbreviated name (`mesh`) with your project
abbreviated name. Note that you should use the same abbreviation as the
one you used when you submitted the "Project Request" form:

```{r}
usethis::create_from_github("steno-aarhus/mesh")
```

From here, go to the Desktop or wherever you created the project and
open up the RStudio `.Rproj` file so that the project starts up in
RStudio. In this project will be the files you need to get started on
the project, and especially at this stage, the `doc/protocol.Rmd` and
the `data-raw/project-variables.csv` files. You'll be working on these
files before beginning to use the RAP and doing analyses.

::: callout-tip
Most likely, you are new to Git and GitHub. Git is a very powerful way
of managing your files and your projects, but it also requires some
major conceptual rewiring of how you work with files and computers. It
takes some time to learn! Your project is on GitHub, and you just
downloaded it to your computer. Unlike Dropbox or OneDrive, the files in
your project on your computer don't automatically synchronize with those
on GitHub. You have to do it manually. Whenever you use Git and save
your changes to the Git history, you need to "Push" your changes to your
project files to GitHub. The diagram below shows how it conceptually
looks like:

```{mermaid}
graph LR;
    Local -->|Push| GitHub
    GitHub -->|Pull| Local
    UKB-RAP -->|Push| GitHub
    GitHub -->|Pull| UKB-RAP
```

The "Local" is your own computer. Whenever you "push" to GitHub, it
means it will upload your file changes (like synchronizing in Dropbox).
Whenever you "pull" from GitHub, it takes any changes made on GitHub and
downloads them to your "Local" computer.

When you work on the UKB-RAP, you will "pull" (download) your project
from GitHub. As you work on it and save changes in your Git history, you
"push" (upload) to GitHub often in order to keep your changes backed up.
Then, when you get to the paper writing stage, you can pull your results
from GitHub to your "Local" so you can work without getting charged.
:::

::: callout-note
Why do we do it this way? For one, it is honestly the easiest that we
could think of because the UKB RAP is a special environment that
requires special steps to work in. Plus, using Git and GitHub makes it
easier to have others (like me) collaborate on your project and help you
out. So hypothetically, if you need help, I (Luke) could download your
project from GitHub and make changes there. Conceptually it would look
like:

```{mermaid}
graph TD;
    UKB-RAP -->|Push| GitHub
    GitHub -->|Pull| UKB-RAP
    You -->|Push| GitHub
    GitHub -->|Pull| You
    Luke -->|Push| GitHub
    GitHub -->|Pull| Luke
```

That way it makes it super easy for me (or others) to help out.
:::

As you work on the project, specifically the protocol and selecting the
variables for your project from the `data-raw/project-variables.csv`
list, you'll use Git to save the changes made and push up to GitHub.
Once your protocol has been reviewed and uploaded to OSF, you're now
ready to start doing the data analysis on the RAP.

**But before doing anything else**, complete the tasks in the `todo.md`
file, which will direct you to fill in details in the `README.md`.

After you've done the TODO items, start working towards writing the
protocol and analysis plan before beginning your work in the UKB RAP.

## Steps everytime you enter into the UKB RAP

1.  Whenever you open up the UKB RAP, you won't have your project files
    nor have any packages installed. So you'll need to do a few set up
    tasks *each time* you work in the RAP. I've written a function that
    you can source directly that will take you through the steps needed
    to have everything set up. Run these two lines of code in the R
    Console, and afterwards follow the instructions on the Console.

    ```{r}
    source("https://raw.githubusercontent.com/steno-aarhus/ukbAid/main/R/setup-ukb-rap.R")
    setup_ukb_rap()
    ```

    ::: callout-note
    Since UKB RAP deletes everything when you Terminate the session,
    you'll be backing up your project on GitHub. What this function
    above does is install the necessary packages, installs the ukbAid
    package, sets up your Git config, sets up your authentication
    (credentials) to connect to GitHub, and finally downloads your
    GitHub repository into the RAP environment.
    :::

2.  Once the project is downloaded from GitHub and created the project
    in the RAP, you can open it by clicking the `.Rproj` file inside the
    project folder.

3.  You *may* have to update your credentials after opening up your
    project, so run this code to paste in your GitHub PAT token.

    ```{r}
    gitcreds::gitcreds_set()
    ```

4.  Then, run these two lines of code in the Console while inside your
    RStudio Project:

    ```{r}
    pak::pak()
    targets::tar_make()
    ```

    More details about this step is also found in your own project's
    main `README.md` file.

5.  When you've finished selecting the variables you want in the
    `data-raw/project-variables.csv`, you will need to open up the
    `data-raw/create-data.R` script and follow the instructions there to
    create your dataset.

Remember to frequently commit and push your file changes to your GitHub.
Otherwise all your work on the RAP will be lost next time you login.

## Other notes

-   **About specific variables**: There are some variables in the list
    of variables we have that don't exist in the RAP database, for
    instance like date of birth. This may be due to privacy concerns, so
    instead you would have to use year of birth (`p34`) to determine
    their age.

-   **Save your changes in the Git history and push to your GitHub
    BEFORE Terminating your UKB-RAP project**: If you terminate before
    saving and pushing to GitHub, you *will* lose your work!

-   **Remember**, do not save any data in the Git history unless you
    have discussed it with the organizing committee. You can save
    results for tables and figures, as long as they are aggregate or
    statistical results.
